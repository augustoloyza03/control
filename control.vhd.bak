-- Copyright (C) 1991-2013 Altera Corporation
-- Your use of Altera Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Altera Program License 
-- Subscription Agreement, Altera MegaCore Function License 
-- Agreement, or other applicable license agreement, including, 
-- without limitation, that your use is for the sole purpose of 
-- programming logic devices manufactured by Altera and sold by 
-- Altera or its authorized distributors.  Please refer to the 
-- applicable agreement for further details.

-- Generated by Quartus II Version 13.0.1 Build 232 06/12/2013 Service Pack 1 SJ Web Edition
-- Created on Sat Nov 23 16:28:13 2024

LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY control IS
    PORT (
        reset : IN STD_LOGIC := '0';
        clock : IN STD_LOGIC;
        S : IN STD_LOGIC := '0';
        GI : IN STD_LOGIC := '0';
        GD : IN STD_LOGIC := '0';
        O0 : IN STD_LOGIC := '0';
        O1 : IN STD_LOGIC := '0';
        C : IN STD_LOGIC := '0';
        M3 : OUT STD_LOGIC;
        M2 : OUT STD_LOGIC;
        M1 : OUT STD_LOGIC;
        M0 : OUT STD_LOGIC;
        Habilitación : OUT STD_LOGIC;
        R : OUT STD_LOGIC;
        cuenta : OUT STD_LOGIC
    );
END control;

ARCHITECTURE BEHAVIOR OF control IS
    TYPE type_fstate IS (I,auxI,D,auxD,RPD,RPI,RP,Atención);
    SIGNAL fstate : type_fstate;
    SIGNAL reg_fstate : type_fstate;
BEGIN
    PROCESS (clock,reset,reg_fstate)
    BEGIN
        IF (reset='0') THEN
            fstate <= Atención;
        ELSIF (clock='1' AND clock'event) THEN
            fstate <= reg_fstate;
        END IF;
    END PROCESS;

    PROCESS (fstate,S,GI,GD,O0,O1,C)
    BEGIN
        M3 <= '0';
        M2 <= '0';
        M1 <= '0';
        M0 <= '0';
        Habilitación <= '0';
        R <= '0';
        cuenta <= '0';
        CASE fstate IS
            WHEN I =>
                IF ((C = '0')) THEN
                    reg_fstate <= auxI;
                ELSIF (((S = '1') AND (C = '1'))) THEN
                    reg_fstate <= RPI;
                ELSIF (((S = '0') AND (S = '1'))) THEN
                    reg_fstate <= Atención;
                -- Inserting 'else' block to prevent latch inference
                ELSE
                    reg_fstate <= I;
                END IF;

                IF (((((C = '1') AND (S = '1')) AND (O1 = '0')) AND (O0 = '1'))) THEN
                    M3 <= '1';
                -- Inserting 'else' block to prevent latch inference
                ELSE
                    M3 <= '0';
                END IF;

                IF (((((C = '1') AND (S = '1')) AND (O1 = '0')) AND (O0 = '0'))) THEN
                    M2 <= '1';
                -- Inserting 'else' block to prevent latch inference
                ELSE
                    M2 <= '0';
                END IF;

                IF (((((C = '1') AND (S = '1')) AND (O1 = '1')) AND (O0 = '1'))) THEN
                    M0 <= '1';
                -- Inserting 'else' block to prevent latch inference
                ELSE
                    M0 <= '0';
                END IF;

                IF (((((C = '1') AND (S = '1')) AND (O1 = '1')) AND (O0 = '0'))) THEN
                    M1 <= '1';
                -- Inserting 'else' block to prevent latch inference
                ELSE
                    M1 <= '0';
                END IF;

                IF ((C = '0')) THEN
                    R <= '0';
                ELSIF ((C = '1')) THEN
                    R <= '1';
                -- Inserting 'else' block to prevent latch inference
                ELSE
                    R <= '0';
                END IF;

                IF ((C = '0')) THEN
                    Habilitación <= '0';
                ELSIF (((C = '1') AND (S = '1'))) THEN
                    Habilitación <= '1';
                -- Inserting 'else' block to prevent latch inference
                ELSE
                    Habilitación <= '0';
                END IF;
            WHEN auxI =>
                reg_fstate <= I;

                cuenta <= '1';
            WHEN D =>
                IF ((C = '0')) THEN
                    reg_fstate <= auxD;
                ELSIF (((C = '1') AND (S = '1'))) THEN
                    reg_fstate <= RPD;
                ELSIF (((S = '0') AND (S = '1'))) THEN
                    reg_fstate <= Atención;
                -- Inserting 'else' block to prevent latch inference
                ELSE
                    reg_fstate <= D;
                END IF;

                IF (((((C = '1') AND (S = '1')) AND (O1 = '1')) AND (O0 = '0'))) THEN
                    M3 <= '1';
                -- Inserting 'else' block to prevent latch inference
                ELSE
                    M3 <= '0';
                END IF;

                IF (((((C = '1') AND (S = '1')) AND (O1 = '1')) AND (O0 = '1'))) THEN
                    M2 <= '1';
                -- Inserting 'else' block to prevent latch inference
                ELSE
                    M2 <= '0';
                END IF;

                IF (((((C = '1') AND (S = '1')) AND (O1 = '0')) AND (O0 = '0'))) THEN
                    M0 <= '1';
                -- Inserting 'else' block to prevent latch inference
                ELSE
                    M0 <= '0';
                END IF;

                IF (((((C = '1') AND (S = '1')) AND (O1 = '0')) AND (O0 = '1'))) THEN
                    M1 <= '1';
                -- Inserting 'else' block to prevent latch inference
                ELSE
                    M1 <= '0';
                END IF;

                IF ((C = '0')) THEN
                    R <= '0';
                ELSIF ((C = '1')) THEN
                    R <= '1';
                -- Inserting 'else' block to prevent latch inference
                ELSE
                    R <= '0';
                END IF;

                IF ((C = '0')) THEN
                    Habilitación <= '0';
                ELSIF (((C = '1') AND (S = '1'))) THEN
                    Habilitación <= '1';
                -- Inserting 'else' block to prevent latch inference
                ELSE
                    Habilitación <= '0';
                END IF;
            WHEN auxD =>
                reg_fstate <= D;

                cuenta <= '1';
            WHEN RPD =>
                IF (((GI = '1') AND (GD = '1'))) THEN
                    reg_fstate <= I;
                -- Inserting 'else' block to prevent latch inference
                ELSE
                    reg_fstate <= RPD;
                END IF;

                R <= '1';
            WHEN RPI =>
                IF (((GI = '1') AND (GD = '1'))) THEN
                    reg_fstate <= D;
                -- Inserting 'else' block to prevent latch inference
                ELSE
                    reg_fstate <= RPI;
                END IF;

                R <= '1';
            WHEN RP =>
                IF (((GI = '1') AND (GD = '0'))) THEN
                    reg_fstate <= I;
                ELSIF (((GI = '0') AND (GD = '1'))) THEN
                    reg_fstate <= D;
                ELSIF (((GI = '0') AND (GD = '0'))) THEN
                    reg_fstate <= Atención;
                -- Inserting 'else' block to prevent latch inference
                ELSE
                    reg_fstate <= RP;
                END IF;

                IF (((GI = '0') AND (GD = '1'))) THEN
                    R <= '0';
                ELSIF (((GI = '0') AND (GD = '0'))) THEN
                    R <= '1';
                -- Inserting 'else' block to prevent latch inference
                ELSE
                    R <= '0';
                END IF;
            WHEN Atención =>
                IF ((S = '1')) THEN
                    reg_fstate <= RP;
                ELSIF ((S = '0')) THEN
                    reg_fstate <= Atención;
                -- Inserting 'else' block to prevent latch inference
                ELSE
                    reg_fstate <= Atención;
                END IF;

                IF ((((S = '1') AND (O1 = '1')) AND (O0 = '1'))) THEN
                    M3 <= '1';
                -- Inserting 'else' block to prevent latch inference
                ELSE
                    M3 <= '0';
                END IF;

                IF ((((S = '1') AND (O1 = '0')) AND (O0 = '1'))) THEN
                    M2 <= '1';
                -- Inserting 'else' block to prevent latch inference
                ELSE
                    M2 <= '0';
                END IF;

                IF ((((S = '1') AND (O1 = '1')) AND (O0 = '0'))) THEN
                    M0 <= '1';
                -- Inserting 'else' block to prevent latch inference
                ELSE
                    M0 <= '0';
                END IF;

                IF ((((S = '1') AND (O1 = '0')) AND (O0 = '0'))) THEN
                    M1 <= '1';
                -- Inserting 'else' block to prevent latch inference
                ELSE
                    M1 <= '0';
                END IF;

                IF ((S = '0')) THEN
                    R <= '1';
                -- Inserting 'else' block to prevent latch inference
                ELSE
                    R <= '0';
                END IF;

                IF ((S = '0')) THEN
                    Habilitación <= '0';
                ELSIF ((S = '1')) THEN
                    Habilitación <= '1';
                -- Inserting 'else' block to prevent latch inference
                ELSE
                    Habilitación <= '0';
                END IF;
            WHEN OTHERS => 
                M3 <= 'X';
                M2 <= 'X';
                M1 <= 'X';
                M0 <= 'X';
                Habilitación <= 'X';
                R <= 'X';
                cuenta <= 'X';
                report "Reach undefined state";
        END CASE;
    END PROCESS;
END BEHAVIOR;
