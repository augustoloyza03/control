-- Quartus II VHDL Template
-- Four-State Moore State Machine

-- A Moore machine's outputs are dependent only on the current state.
-- The output is written only when the state changes.  (State
-- transitions are synchronous.)

library ieee;
use ieee.std_logic_1164.all;

entity four_state_moore_state_machine is

	port(
		clk		 : in	std_logic;
		s,tc1,tc2,O1,O0	 : in	std_logic;
		reset	 : in	std_logic;
		M3,M2,M1,M0	 : out	std_logic_vector(1 downto 0)
	);

end entity;

architecture rtl of four_state_moore_state_machine is

	-- Build an enumerated type for the state machine
	type state_type is (at, rp);

	-- Register to hold the current state
	signal state   : state_type;

begin

	-- Logic to advance to the next state
	process (clk, reset)
	begin
		if reset = '1' then
			state <= at;
		elsif (rising_edge(clk)) then
			case state is
				when at=>
					if  ((S= '0' and tc1='1') or (S='0' and tc2='1')) then
						state <= at;
					elsif ((S= '1' and tc1='0') or (S='1' and tc2='0')) then
						state <= rp;
						else 
						state <= at;
					end if;
				when rp=>
					if  (rising_edge(GI)) or (rising_edge(GD)) then
						state <= at;
					else
						state <= rp;
					end if;
			end case;
		end if;
	end process;

	-- Output depends solely on the current state
	process (state)
	begin
		case state is
				
			when rp =>
			 if (O1='0' and O0='0') then
				M1<= '1';
			 elsif (O1='0' and O0='1') then
			   M2<= '1';
			 elsif (O1='1' and O0='0') then
			   M0<= '1';
			elsif (O1='1' and O0='1') then
			   M3<= '1';	
		end case;
	end process;

end rtl;
